/*
 * Croct Export
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.3.0
 * Contact: apis@croct.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.croct.client.export.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.croct.client.export.model.SlotPersonalizedPersonalizationAssignedVariant;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.croct.client.export.JSON;


/**
 * SlotPersonalizedPersonalization
 */
@JsonPropertyOrder({
  SlotPersonalizedPersonalization.JSON_PROPERTY_AUDIENCE_ID,
  SlotPersonalizedPersonalization.JSON_PROPERTY_SLOT_ID,
  SlotPersonalizedPersonalization.JSON_PROPERTY_EXPERIENCE_ID,
  SlotPersonalizedPersonalization.JSON_PROPERTY_CONTENT_ID,
  SlotPersonalizedPersonalization.JSON_PROPERTY_ASSIGNED_VARIANT
})
@JsonTypeName("SlotPersonalized_personalization")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0-SNAPSHOT")
public class SlotPersonalizedPersonalization {
  public static final String JSON_PROPERTY_AUDIENCE_ID = "audienceId";
  private UUID audienceId;

  public static final String JSON_PROPERTY_SLOT_ID = "slotId";
  private UUID slotId;

  public static final String JSON_PROPERTY_EXPERIENCE_ID = "experienceId";
  private UUID experienceId;

  public static final String JSON_PROPERTY_CONTENT_ID = "contentId";
  private UUID contentId;

  public static final String JSON_PROPERTY_ASSIGNED_VARIANT = "assignedVariant";
  private SlotPersonalizedPersonalizationAssignedVariant assignedVariant;

  public SlotPersonalizedPersonalization() { 
  }

  public SlotPersonalizedPersonalization audienceId(UUID audienceId) {
    this.audienceId = audienceId;
    return this;
  }

   /**
   * The ID that uniquely identifies the audience.
   * @return audienceId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUDIENCE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getAudienceId() {
    return audienceId;
  }


  @JsonProperty(JSON_PROPERTY_AUDIENCE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAudienceId(UUID audienceId) {
    this.audienceId = audienceId;
  }


  public SlotPersonalizedPersonalization slotId(UUID slotId) {
    this.slotId = slotId;
    return this;
  }

   /**
   * The ID that uniquely identifies the slot.
   * @return slotId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SLOT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getSlotId() {
    return slotId;
  }


  @JsonProperty(JSON_PROPERTY_SLOT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSlotId(UUID slotId) {
    this.slotId = slotId;
  }


  public SlotPersonalizedPersonalization experienceId(UUID experienceId) {
    this.experienceId = experienceId;
    return this;
  }

   /**
   * The ID that uniquely identifies the experience.
   * @return experienceId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPERIENCE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getExperienceId() {
    return experienceId;
  }


  @JsonProperty(JSON_PROPERTY_EXPERIENCE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExperienceId(UUID experienceId) {
    this.experienceId = experienceId;
  }


  public SlotPersonalizedPersonalization contentId(UUID contentId) {
    this.contentId = contentId;
    return this;
  }

   /**
   * The ID that uniquely identifies the content.
   * @return contentId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONTENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getContentId() {
    return contentId;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContentId(UUID contentId) {
    this.contentId = contentId;
  }


  public SlotPersonalizedPersonalization assignedVariant(SlotPersonalizedPersonalizationAssignedVariant assignedVariant) {
    this.assignedVariant = assignedVariant;
    return this;
  }

   /**
   * Get assignedVariant
   * @return assignedVariant
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ASSIGNED_VARIANT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SlotPersonalizedPersonalizationAssignedVariant getAssignedVariant() {
    return assignedVariant;
  }


  @JsonProperty(JSON_PROPERTY_ASSIGNED_VARIANT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAssignedVariant(SlotPersonalizedPersonalizationAssignedVariant assignedVariant) {
    this.assignedVariant = assignedVariant;
  }


  /**
   * Return true if this SlotPersonalized_personalization object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SlotPersonalizedPersonalization slotPersonalizedPersonalization = (SlotPersonalizedPersonalization) o;
    return Objects.equals(this.audienceId, slotPersonalizedPersonalization.audienceId) &&
        Objects.equals(this.slotId, slotPersonalizedPersonalization.slotId) &&
        Objects.equals(this.experienceId, slotPersonalizedPersonalization.experienceId) &&
        Objects.equals(this.contentId, slotPersonalizedPersonalization.contentId) &&
        Objects.equals(this.assignedVariant, slotPersonalizedPersonalization.assignedVariant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audienceId, slotId, experienceId, contentId, assignedVariant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SlotPersonalizedPersonalization {\n");
    sb.append("    audienceId: ").append(toIndentedString(audienceId)).append("\n");
    sb.append("    slotId: ").append(toIndentedString(slotId)).append("\n");
    sb.append("    experienceId: ").append(toIndentedString(experienceId)).append("\n");
    sb.append("    contentId: ").append(toIndentedString(contentId)).append("\n");
    sb.append("    assignedVariant: ").append(toIndentedString(assignedVariant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

