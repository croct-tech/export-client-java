/*
 * Croct Export
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.3.0
 * Contact: apis@croct.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.croct.client.export.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.croct.client.export.model.CartItem;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.croct.client.export.JSON;


/**
 * A shopping cart in an online store.
 */
@JsonPropertyOrder({
  Cart.JSON_PROPERTY_CURRENCY,
  Cart.JSON_PROPERTY_ITEMS,
  Cart.JSON_PROPERTY_SUBTOTAL,
  Cart.JSON_PROPERTY_SHIPPING_PRICE,
  Cart.JSON_PROPERTY_TAXES,
  Cart.JSON_PROPERTY_COSTS,
  Cart.JSON_PROPERTY_DISCOUNT,
  Cart.JSON_PROPERTY_TOTAL,
  Cart.JSON_PROPERTY_COUPON,
  Cart.JSON_PROPERTY_LAST_UPDATE_TIME
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Cart {
  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private String currency;

  public static final String JSON_PROPERTY_ITEMS = "items";
  private List<CartItem> items = new ArrayList<>();

  public static final String JSON_PROPERTY_SUBTOTAL = "subtotal";
  private Double subtotal;

  public static final String JSON_PROPERTY_SHIPPING_PRICE = "shippingPrice";
  private Double shippingPrice;

  public static final String JSON_PROPERTY_TAXES = "taxes";
  private Object taxes;

  public static final String JSON_PROPERTY_COSTS = "costs";
  private Object costs;

  public static final String JSON_PROPERTY_DISCOUNT = "discount";
  private Double discount;

  public static final String JSON_PROPERTY_TOTAL = "total";
  private Double total;

  public static final String JSON_PROPERTY_COUPON = "coupon";
  private String coupon;

  public static final String JSON_PROPERTY_LAST_UPDATE_TIME = "lastUpdateTime";
  private Long lastUpdateTime;

  public Cart() { 
  }

  public Cart currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * The currency in which the monetary values are expressed in the shopping cart. The currency should be specified using the 3-letter currency codes defined by the ISO 4217 standard. For currencies having no official recognition in ISO 4217, as is the case with cryptocurrencies, it is allowed the use of non-ISO codes adopted locally or commercially. For example, \&quot;BRL\&quot; for Brazilian real or \&quot;BTC\&quot; for Bitcoin.
   * @return currency
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public Cart items(List<CartItem> items) {
    this.items = items;
    return this;
  }

  public Cart addItemsItem(CartItem itemsItem) {
    this.items.add(itemsItem);
    return this;
  }

   /**
   * The list of items in the shopping cart.
   * @return items
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<CartItem> getItems() {
    return items;
  }


  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setItems(List<CartItem> items) {
    this.items = items;
  }


  public Cart subtotal(Double subtotal) {
    this.subtotal = subtotal;
    return this;
  }

   /**
   * The total of all items and quantities in the shopping cart including applied item promotions. Applied order discounts, estimated shipping, and applied shipping discounts should be excluded from the subtotal amount.
   * @return subtotal
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBTOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getSubtotal() {
    return subtotal;
  }


  @JsonProperty(JSON_PROPERTY_SUBTOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubtotal(Double subtotal) {
    this.subtotal = subtotal;
  }


  public Cart shippingPrice(Double shippingPrice) {
    this.shippingPrice = shippingPrice;
    return this;
  }

   /**
   * The total shipping price for the items in the shopping cart, including any handling charges.
   * @return shippingPrice
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHIPPING_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getShippingPrice() {
    return shippingPrice;
  }


  @JsonProperty(JSON_PROPERTY_SHIPPING_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setShippingPrice(Double shippingPrice) {
    this.shippingPrice = shippingPrice;
  }


  public Cart taxes(Object taxes) {
    this.taxes = taxes;
    return this;
  }

   /**
   * The taxes associated with the transaction.
   * @return taxes
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAXES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getTaxes() {
    return taxes;
  }


  @JsonProperty(JSON_PROPERTY_TAXES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTaxes(Object taxes) {
    this.taxes = taxes;
  }


  public Cart costs(Object costs) {
    this.costs = costs;
    return this;
  }

   /**
   * The costs associated with the transaction, such as manufacturing costs, shipping expenses not borne by the customer, or any other costs.
   * @return costs
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COSTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getCosts() {
    return costs;
  }


  @JsonProperty(JSON_PROPERTY_COSTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCosts(Object costs) {
    this.costs = costs;
  }


  public Cart discount(Double discount) {
    this.discount = discount;
    return this;
  }

   /**
   * The amount of the discount applied to the shopping cart.
   * @return discount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISCOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getDiscount() {
    return discount;
  }


  @JsonProperty(JSON_PROPERTY_DISCOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDiscount(Double discount) {
    this.discount = discount;
  }


  public Cart total(Double total) {
    this.total = total;
    return this;
  }

   /**
   * The total revenue or grand total associated with the transaction. It includes shipping, tax, and any other adjustment.
   * @return total
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getTotal() {
    return total;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotal(Double total) {
    this.total = total;
  }


  public Cart coupon(String coupon) {
    this.coupon = coupon;
    return this;
  }

   /**
   * The coupon applied to the shopping cart. For example, \&quot;SUPER_DEALS\&quot;.
   * @return coupon
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUPON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCoupon() {
    return coupon;
  }


  @JsonProperty(JSON_PROPERTY_COUPON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCoupon(String coupon) {
    this.coupon = coupon;
  }


  public Cart lastUpdateTime(Long lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

   /**
   * The timestamp when the shopping cart was last updated, in milliseconds since epoch.
   * @return lastUpdateTime
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LAST_UPDATE_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getLastUpdateTime() {
    return lastUpdateTime;
  }


  @JsonProperty(JSON_PROPERTY_LAST_UPDATE_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLastUpdateTime(Long lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
  }


  /**
   * Return true if this Cart object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cart cart = (Cart) o;
    return Objects.equals(this.currency, cart.currency) &&
        Objects.equals(this.items, cart.items) &&
        Objects.equals(this.subtotal, cart.subtotal) &&
        Objects.equals(this.shippingPrice, cart.shippingPrice) &&
        Objects.equals(this.taxes, cart.taxes) &&
        Objects.equals(this.costs, cart.costs) &&
        Objects.equals(this.discount, cart.discount) &&
        Objects.equals(this.total, cart.total) &&
        Objects.equals(this.coupon, cart.coupon) &&
        Objects.equals(this.lastUpdateTime, cart.lastUpdateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, items, subtotal, shippingPrice, taxes, costs, discount, total, coupon, lastUpdateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cart {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    shippingPrice: ").append(toIndentedString(shippingPrice)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    costs: ").append(toIndentedString(costs)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    coupon: ").append(toIndentedString(coupon)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

