/*
 * Croct Export
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.3.0
 * Contact: apis@croct.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.croct.client.export.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.croct.client.export.model.OrderItem;
import com.croct.client.export.model.OrderStatus;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.croct.client.export.JSON;


/**
 * An order placed in an online store.
 */
@JsonPropertyOrder({
  Order.JSON_PROPERTY_ORDER_ID,
  Order.JSON_PROPERTY_CURRENCY,
  Order.JSON_PROPERTY_ITEMS,
  Order.JSON_PROPERTY_SUBTOTAL,
  Order.JSON_PROPERTY_SHIPPING_PRICE,
  Order.JSON_PROPERTY_TAXES,
  Order.JSON_PROPERTY_COSTS,
  Order.JSON_PROPERTY_DISCOUNT,
  Order.JSON_PROPERTY_TOTAL,
  Order.JSON_PROPERTY_COUPON,
  Order.JSON_PROPERTY_PAYMENT_METHOD,
  Order.JSON_PROPERTY_INSTALLMENTS,
  Order.JSON_PROPERTY_STATUS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Order {
  public static final String JSON_PROPERTY_ORDER_ID = "orderId";
  private UUID orderId;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private String currency;

  public static final String JSON_PROPERTY_ITEMS = "items";
  private List<OrderItem> items = new ArrayList<>();

  public static final String JSON_PROPERTY_SUBTOTAL = "subtotal";
  private Double subtotal;

  public static final String JSON_PROPERTY_SHIPPING_PRICE = "shippingPrice";
  private Double shippingPrice;

  public static final String JSON_PROPERTY_TAXES = "taxes";
  private Object taxes;

  public static final String JSON_PROPERTY_COSTS = "costs";
  private Object costs;

  public static final String JSON_PROPERTY_DISCOUNT = "discount";
  private Double discount;

  public static final String JSON_PROPERTY_TOTAL = "total";
  private Double total;

  public static final String JSON_PROPERTY_COUPON = "coupon";
  private String coupon;

  public static final String JSON_PROPERTY_PAYMENT_METHOD = "paymentMethod";
  private String paymentMethod;

  public static final String JSON_PROPERTY_INSTALLMENTS = "installments";
  private Integer installments;

  public static final String JSON_PROPERTY_STATUS = "status";
  private OrderStatus status;

  public Order() { 
  }

  public Order orderId(UUID orderId) {
    this.orderId = orderId;
    return this;
  }

   /**
   * The ID that uniquely identifies the order across the store.
   * @return orderId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getOrderId() {
    return orderId;
  }


  @JsonProperty(JSON_PROPERTY_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrderId(UUID orderId) {
    this.orderId = orderId;
  }


  public Order currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * The currency in which the monetary values are expressed in the order. The currency should be specified using the 3-letter currency codes defined by the ISO 4217 standard. For currencies having no official recognition in ISO 4217, as is the case with cryptocurrencies, it is allowed the use of non-ISO codes adopted locally or commercially. For example, \&quot;BRL\&quot; for Brazilian real or \&quot;BTC\&quot; for Bitcoin.
   * @return currency
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public Order items(List<OrderItem> items) {
    this.items = items;
    return this;
  }

  public Order addItemsItem(OrderItem itemsItem) {
    this.items.add(itemsItem);
    return this;
  }

   /**
   * The list of items in the order.
   * @return items
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<OrderItem> getItems() {
    return items;
  }


  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setItems(List<OrderItem> items) {
    this.items = items;
  }


  public Order subtotal(Double subtotal) {
    this.subtotal = subtotal;
    return this;
  }

   /**
   * The total of all items and quantities in the order including applied item promotions. Applied order discounts, estimated shipping, and applied shipping discounts should be excluded from the subtotal amount.
   * @return subtotal
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBTOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getSubtotal() {
    return subtotal;
  }


  @JsonProperty(JSON_PROPERTY_SUBTOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubtotal(Double subtotal) {
    this.subtotal = subtotal;
  }


  public Order shippingPrice(Double shippingPrice) {
    this.shippingPrice = shippingPrice;
    return this;
  }

   /**
   * The total shipping price for the order, including any handling charges.
   * @return shippingPrice
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHIPPING_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getShippingPrice() {
    return shippingPrice;
  }


  @JsonProperty(JSON_PROPERTY_SHIPPING_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setShippingPrice(Double shippingPrice) {
    this.shippingPrice = shippingPrice;
  }


  public Order taxes(Object taxes) {
    this.taxes = taxes;
    return this;
  }

   /**
   * The taxes associated with the transaction.
   * @return taxes
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAXES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getTaxes() {
    return taxes;
  }


  @JsonProperty(JSON_PROPERTY_TAXES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTaxes(Object taxes) {
    this.taxes = taxes;
  }


  public Order costs(Object costs) {
    this.costs = costs;
    return this;
  }

   /**
   * The costs associated with the transaction, such as manufacturing costs, shipping expenses not borne by the customer, or any other costs.
   * @return costs
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COSTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getCosts() {
    return costs;
  }


  @JsonProperty(JSON_PROPERTY_COSTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCosts(Object costs) {
    this.costs = costs;
  }


  public Order discount(Double discount) {
    this.discount = discount;
    return this;
  }

   /**
   * The amount of the discount applied to the order.
   * @return discount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISCOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getDiscount() {
    return discount;
  }


  @JsonProperty(JSON_PROPERTY_DISCOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDiscount(Double discount) {
    this.discount = discount;
  }


  public Order total(Double total) {
    this.total = total;
    return this;
  }

   /**
   * The total revenue or grand total associated with the transaction. It includes shipping, tax, and any other adjustment.
   * @return total
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getTotal() {
    return total;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotal(Double total) {
    this.total = total;
  }


  public Order coupon(String coupon) {
    this.coupon = coupon;
    return this;
  }

   /**
   * The coupon applied to the order. For example, \&quot;SUPER_DEALS\&quot;.
   * @return coupon
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUPON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCoupon() {
    return coupon;
  }


  @JsonProperty(JSON_PROPERTY_COUPON)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCoupon(String coupon) {
    this.coupon = coupon;
  }


  public Order paymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * The payment method used in the payment. For example, \&quot;Credit Card\&quot;, \&quot;Paypal\&quot; or \&quot;Wallet\&quot;.
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPaymentMethod() {
    return paymentMethod;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPaymentMethod(String paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public Order installments(Integer installments) {
    this.installments = installments;
    return this;
  }

   /**
   * The number of installments of the transaction, non-negative.
   * @return installments
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INSTALLMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getInstallments() {
    return installments;
  }


  @JsonProperty(JSON_PROPERTY_INSTALLMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInstallments(Integer installments) {
    this.installments = installments;
  }


  public Order status(OrderStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OrderStatus getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(OrderStatus status) {
    this.status = status;
  }


  /**
   * Return true if this Order object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.orderId, order.orderId) &&
        Objects.equals(this.currency, order.currency) &&
        Objects.equals(this.items, order.items) &&
        Objects.equals(this.subtotal, order.subtotal) &&
        Objects.equals(this.shippingPrice, order.shippingPrice) &&
        Objects.equals(this.taxes, order.taxes) &&
        Objects.equals(this.costs, order.costs) &&
        Objects.equals(this.discount, order.discount) &&
        Objects.equals(this.total, order.total) &&
        Objects.equals(this.coupon, order.coupon) &&
        Objects.equals(this.paymentMethod, order.paymentMethod) &&
        Objects.equals(this.installments, order.installments) &&
        Objects.equals(this.status, order.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderId, currency, items, subtotal, shippingPrice, taxes, costs, discount, total, coupon, paymentMethod, installments, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    shippingPrice: ").append(toIndentedString(shippingPrice)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    costs: ").append(toIndentedString(costs)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    coupon: ").append(toIndentedString(coupon)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    installments: ").append(toIndentedString(installments)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

